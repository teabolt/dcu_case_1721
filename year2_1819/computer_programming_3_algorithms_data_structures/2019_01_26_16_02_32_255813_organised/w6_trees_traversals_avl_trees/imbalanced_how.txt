Title: Imbalanced - How?
Description: An AVL tree has just had a third node added to it and the root node needs to be balanced. That is, the heights of its left and right children differ by more than one. In fact, differ by 2.
Your job is to determine the type of rotation that will be required to fix it. Write a function which will take a Binary Search Tree as a parameter and return a string indicating what type of imbalance exists, i.e. left-left, right-right, left-right or right-left. The returned string should be "ll", "rr", "lr", "rl" indicating the type of imbalance.
Your function will be tested by the following:
import sys
from BST import BST
from student import rotation_type

def main():
    # Read each test case
    line = sys.stdin.readline()
    items = line.strip().split()
    nums = [int(item) for item in items]

    tree = BST(nums)

    print(
rotation_type(tree)
)

if __name__ == "__main__":
    main()

The tree itself will be defined as follows (same as last problem):
class Node:
    """ A node in a BST. It may have left and right subtrees """
    def __init__(self, item, left = None, right = None):
        self.item = item
        self.left = left
        self.right = right

class BST:
    """ An implementation of a Binary Search Tree
     """
    def __init__(self, lst = None):
        self.root = None
        if lst != None:
            for x in lst:
                self.add(x)

    def recurse_add(self, ptr, item):
        if ptr == None:
            return Node(item)
        elif item < ptr.item:
            ptr.left = self.recurse_add(ptr.left, item)
        elif item > ptr.item:
            ptr.right = self.recurse_add(ptr.right, item)
        return ptr
        
    def add(self, item):
        """ Add this item to its correct position on the tree """
        self.root = self.recurse_add(self.root, item)

    def r_height(self, ptr):
        if ptr == None:
            return 0
        else:
            return 1 + max(self.r_height(ptr.left), self.r_height(ptr.right))

    def height(self): return self.r_height(self.root)

Tests: 4 tests run/ 4 tests passed
Grade: 100
