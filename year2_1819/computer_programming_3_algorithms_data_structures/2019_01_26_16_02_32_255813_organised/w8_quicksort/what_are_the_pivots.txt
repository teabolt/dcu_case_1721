Title: What are the pivots
Description: def solution():
    return []
and you will get a message similar to
Your list is:
[20, 16, 8, 11, 5, 14]
Note however, your list will be different to the above. Work out the solution and submit the solution and get full marks.
How do I know which elements were the pivots?
Well, the code will use the following partition function:
def partition(lst, lo, hi):
    if len(lst) == 0:
        return 0

    part = lo
    while lo < hi:
        while lst[lo] <= lst[part] and lo < hi:
            lo += 1
        while lst[hi] > lst[part]: # Don't have to check for hi >= 0 cos part is there as a sentinel.
            hi -= 1

        if lo < hi:
            # Swap the two entries
            lst[hi], lst[lo] = lst[lo], lst[hi]

    # Swap part into position
    if lst[part] > lst[hi]: # (this may happen of the array is small (size 2))
        lst[part], lst[hi] = lst[hi], lst[part]

    return hi

This code always chooses the leftmost element to be the pivot and finds where it belongs in the list while simultaneously ensuring that all elements smaller than the pivot are to the left and all elements larger are to the right. Once the list has been partitioned, quicksort can now create new smaller partitions to the left and to the right and recursively sort those:
def qsort(lst, lo, hi):
    if lo < hi:
        pivot = partition(lst, lo, hi)
        qsort(lst, lo, pivot - 1) # do the left
        qsort(lst, pivot + 1, hi) # do the right

In the case of the above numbers, the first partition element will be 20 (the leftmost element). In this case, it's also the largest number and so the partition function will swap the 14 and 20 which means 14 will be the new leftmost number and that will be the next pivot. If the sub array has only one element, then you should not process that. In other words, don't add it to the list of pivots.
Tests: 1  test run/ 1  test passed
Grade: 100
