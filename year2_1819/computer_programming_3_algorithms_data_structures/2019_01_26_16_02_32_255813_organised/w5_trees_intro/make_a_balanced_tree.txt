Title: Make a Balanced Tree
Description: Consider the implementation of the Binary Tree class below:
class Node:
    """ A node in a BST. It may have left and right subtrees """
    def __init__(self, item, left = None, right = None):
        self.item = item
        self.left = left
        self.right = right

class BST:
    """ An implementation of a Binary Search Tree """
    def __init__(self):
        self.root = None

    def recurse_add(self, ptr, item):
        if ptr == None:
            return Node(item)
        elif item < ptr.item:
            ptr.left = self.recurse_add(ptr.left, item)
        elif item > ptr.item:
            ptr.right = self.recurse_add(ptr.right, item)
        return ptr
        
    def add(self, item):
        """ Add this item to its correct position on the tree """
        self.root = self.recurse_add(self.root, item)

When used with the following code: 
tree = BST()
for x in [10, 20, 30]:
    tree.add(x)
The shape of the resulting tree depends on the order of the elements in the list. Your task today is to write a function which takes a list as an argument and rearranges the list  (or produce a new list with the same elements) so that when each item is added to the list, the tree will be perfectly balanced.
Your program will be tested by code similar to the following:
from BST import BST
from student import make_list

import random

def main():
    random.seed(0)
    
    for length in [1, 2, 3, 4, 7, 8, 15, 16, 31, 32, 50, 100]:
        # Make a random lst
        lst = random.sample(range(length), length)

        # Use the students function to arramge the list
        new_list = 
make_list(lst)
 # get the student's lst

        # Make sure they have the same elements
        if sorted(lst) != sorted(new_list):
            print("You have somehow changed the elements of the list. You are only supposed to change the order.")
        else:
            # Create a BST
            tree = BST()
            # and add in the elements from the list
            for element in new_list:
                tree.add(element)
            # Show the lst
            print(lst)
            # And some data ... the height, the count and whether or not balanced.
            print(tree.max_height(), tree.count(), tree.is_balanced())

if __name__ == "__main__":
    main()

So, to sum up, rearrange the elements in the list, so that when added to the tree, the tree will be balanced. Note that the output will show you the list and will then show you the height of the tree, a count of the elements in the tree and whether or not the tree is balanced. A tree is considered balanced when, for each node, the difference in height between the left and right children is less than 1.
Tests: 1  test run/ 1  test passed
Grade: 100
