Title: Iterating the hash table
Description: Add an __iter__() method to the HashSet class so the Hash Set can be iterated. For an example, see the LinkedList code from a previous question.
Note that you don't have to worry about the order of the elements.

Your iterator will be used by the following program:
import sys
from HashSet import HashSet

def main():
    # Read each test case
    line = sys.stdin.readline()
    items = line.strip().split()
    nums = [int(item) for item in items]
    
    # First number is the capacity
    numset = HashSet(nums[0])

    for x in nums[1:]:
        numset.add(x)
        
    numset_items = []
    for x in numset:
        numset_items.append(x)

    print(sorted(numset_items))

if __name__ == "__main__":
    main()

You will be provided with a HashSet implementation:
from LinkedList import LinkedList

class HashSet:
    def __init__(self, capacity=10):
        # Create a list to use as the hash table
        self.table = [None] * capacity

    def add(self, item):
        # Find the hash code
        h = hash(item)
        index = h % len(self.table)

        # Check is it empty
        if self.table[index] == None:
            self.table[index] = LinkedList() # Need a new linked list for this entry

        if item not in self.table[index]:
            # Only add it if not already there (this is a set)
            self.table[index].add(item)
Tests: 2 tests run/ 2 tests passed
Grade: 100
