Title: Insertion Sort Stats V3
Description: If you knew that the smallest element was the first element in the list, then the test in the inner loop 
i > 0 and lst[i] < lst[i-1]
lst[i] < lst[i-1]
Since the smallest item is at the beginning of the list, this condition would never be true when i was 0 and therefore there would no need to explicitly test for i > 0. In this case, the smallest item acts as a "sentinel".
We could deliberately find the smallest element and move it to the front of the list. Some more comparisons and one swap are required, but then the inner loop is faster and simpler. Timing tests show that this can make insertion sort about 10% faster on random input.
For this exercise, return a tuple with the number of compares and the number of moves. Remember that a swap is equivalent to three moves. Also, this approach always takes more moves and compares but it can be faster because the inner loop is simplified.
def insertion_sort(lst):
    if len(lst) == 0:
        return

    # Find the smallest element
    min_index = 0
    for i in range(1, len(lst)):
        if lst[i] < lst[min_index]:
            min_index = i;

    # Move smallest to the front (swap elements min_index and 0)
    lst[0], lst[min_index] = lst[min_index], lst[0]

    # Now, with the smallest in the front, we don't need to check i in the inner loop
    
    # At each pass ensure that that section is sorted (start at 2, cos smallest already in position).
    for todo in range(2, len(lst)):
        # Find correct position for lst[todo]
        store = lst[todo]
        i = todo
        while store < lst[i-1]: # Don't need to check i > 0
            lst[i] = lst[i-1] # Make space for the item
            i -= 1
        lst[i] = store  # Found the place for this item, plonk it in
You will need to count the compares and tests to get the smallest element to the front. Also note that with the test i > 0 removed, then the while loop will always have an extra comparison and not only when i > 0.
Your code will be tested by the following program:
import sys
from insertion_sort import insertion_sort

def main():
    # Read each test case
    line = sys.stdin.readline()
    items = line.strip().split()
    
    orig = list(items)

    result = insertion_sort(items)
    if items != sorted(orig):
        print("The list is not sorted.")
    else:
        print(result)

if __name__ == "__main__":
    main()
Tests: 12 tests run/12 tests passed
Grade: 100
