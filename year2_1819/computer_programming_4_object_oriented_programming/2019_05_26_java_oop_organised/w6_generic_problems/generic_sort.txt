Title: Generic Sort
Description: The following method sorts an array of strings.
public class Sort
{
   private static void swap(String []s, int i, int j)
   {
      String tmp = s[i];
      s[i] = s[j];
      s[j] = tmp;
   }

   public static void sort(String [] items)
   {
      // Use selection sort
      for(int i = 0; i < items.length - 1; i++)
      {
         int minIndex = i;
         for(int j = i + 1; j < items.length; j++)
            if(items[j].compareTo(items[minIndex]) < 0) // items[j] < items[minIndex] ... so update minIndex
               minIndex = j;

         swap(items, i, minIndex);
      }
   }
}
Modify this code so that it is generic. Note that you are only allowed to change three lines, namely lines 3, 5 and 10. Modify those lines so that the sort method will be able to sort any array that implements the Comparable interface. You only need to modify both method headers and a variable declaration. Otherwise the Sort class above should not be modified.
Below is a main method that calls the above method. It should also work when you have modified the code (since String also implements Comparable).
import java.util.Arrays;

public class Main
{
   public static void main(String [] args)
   {
      String [] names = {"James", "Paul", "Kevin", "Martin", "Zed", "Joe", "Jane", "Mary", "Abbie"};
      Sort.sort(names);
      System.out.println(Arrays.toString(names));
   }
}
Note: the following error occurs if you don't implement the Type variable properly:
Note: ./Sort.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

The type should extend Comparable, but is that enough? Have a look at the previous Date exercise  for a clue
Tests: 1  test run/ 1  test passed
Grade: 100
